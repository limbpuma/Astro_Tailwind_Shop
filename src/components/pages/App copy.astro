---
import Layout from "../../layouts/Layout.astro"
import Hero from "../../components/Hero.astro"
import Suscription from "../Suscription.astro"
import ScrollHandler from "../../components/ScrollHandler.jsx"
---

<Layout title="Welcome to Astro.">
  <div id="heroSection1" class="hero-section">
	<Hero

	backgroundColor="bg-red-600"
	backgroundImage="/images/hero_1.png"
  title="New Arrival Men's" 
  title2="Collection" 
  subtitle="summer 2024" 
  buttonText="Discover more" 
  buttonLink="#"
  animationClass="animate-fade-in"
/></div>
<div id="heroSection2" class="hero-section">
<Hero 

backgroundColor="bg-rose-300"
backgroundImage="/images/hero_1.png"
  title="New Arrival Women's" 
  title2="Collection" 
  subtitle="summer 2024" 
  buttonText="Discover more" 
  buttonLink="#"
  animationClass="animate-slide-in-bottom"
/></div>
<div id="heroSection3" class="hero-section">
<Hero 

backgroundColor="bg-blue-500"
backgroundImage="/images/hero_1.png"
title="New Arrival Kid's" 
title2="Collection" 
subtitle="summer 2024" 
buttonText="Discover more" 
buttonLink="#"
animationClass="animate-zoom-in"
/></div>
<div class="hero-section">
<Suscription/></div>


<ScrollHandler client:load />
</Layout>

<style>

</style>



  
  

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.hero-section');
    let currentSectionIndex = -1; // Inicia con -1 para manejar cuando no esté en ninguna sección
    
    // Función para manejar el scroll entre secciones
    const handleScroll = (e) => {
      if (currentSectionIndex === -1) return; // Si no está en una sección, ignora el evento
      e.preventDefault();
      
      if (e.deltaY > 0 && currentSectionIndex < sections.length - 1) { // Scroll hacia abajo
        currentSectionIndex++;
      } else if (e.deltaY < 0 && currentSectionIndex > 0) { // Scroll hacia arriba
        currentSectionIndex--;
      }
      
      sections[currentSectionIndex]?.scrollIntoView({ behavior: 'smooth' });
    };
    
    // Observer para detectar la sección actual
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          currentSectionIndex = Array.from(sections).indexOf(entry.target);
        }
      });
    }, { threshold: 1 });
    
    sections.forEach(section => observer.observe(section));
    
    // Evento de scroll
    window.addEventListener('wheel', handleScroll, { passive: false });
    
    // Desactivar el control personalizado de scroll cuando se sale de las secciones
    window.addEventListener('scroll', () => {
      const isInSection = Array.from(sections).some((section, index) => {
        const rect = section.getBoundingClientRect();
        if (rect.top <= window.innerHeight / 2 && rect.bottom >= window.innerHeight / 2) {
          currentSectionIndex = index;
          return true;
        }
        return false;
      });
      
      if (!isInSection) currentSectionIndex = -1;
    });
  });
  </script>